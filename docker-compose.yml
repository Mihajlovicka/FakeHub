services: 
  db:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    image: fakehub-mysql:8.4
    restart: always
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_DATABASE: fake-hub
      MYSQL_USERNAME: root
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
      - mysql-logs:/var/log/mysql
    networks:
      - mynet
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=localhost", "--user=root", "--password=admin"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  fakehubapi:
    build:
      context: ./FakeHubApi
      dockerfile: Dockerfile
    image: fakehubapi
    ports:
      - "5000:8080"
    networks:
      - mynet
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    volumes:
      - ./secret/cert/harbor.fakehub.com.crt:/usr/local/share/ca-certificates/harbor.fakehub.com.crt:ro
    command: sh -c "update-ca-certificates && dotnet FakeHubApi.dll"
    depends_on:
      redis_cache:
        condition: service_healthy
      db:
        condition: service_healthy
  fakehubclient:
    build:
      context: ./FakeHubClient
      dockerfile: Dockerfile
    image: fakehubclient
    ports:
      - "6666:80"
      - "4433:443"
    networks:
      - mynet
    depends_on:
      - fakehubapi
      - proxy

  # tests:
  #   image: mcr.microsoft.com/dotnet/sdk:8.0
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - mynet
  #   volumes:
  #     - ./FakeHubApi:/FakeHubApi
  #     - ./FakeHubApi.Tests:/FakeHubApi.Tests
  #     - nuget_cache:/root/.nuget/packages
  #   command: ["dotnet", "test","/FakeHubApi.Tests/FakeHubApi.Tests.csproj",  "--results-directory", "/tmp/testresults", "--output", "/tmp/buildoutput" 
  #             # ,"--filter", "FullyQualifiedName=FakeHubApi.Tests.Repositories.Tests.RepositoryServiceTests"]
  #             ]
  #   environment:
  #     - ConnectionStrings__Database=Server=db;Database=fake-hub;User=root;Password=admin;

  log:
    image: goharbor/harbor-log:v2.13.2
    container_name: harbor-log
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    volumes:
      - ./log:/var/log/docker/:z
      - type: bind
        source: ./common/config/log/logrotate.conf
        target: /etc/logrotate.d/logrotate.conf
      - type: bind
        source: ./common/config/log/rsyslog_docker.conf
        target: /etc/rsyslog.d/rsyslog_docker.conf
    ports:
      - 127.0.0.1:1514:10514
    networks:
      - mynet
  registry:
    image: goharbor/registry-photon:v2.13.2
    container_name: registry
    restart: always
    user: "10000:10000"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - ./registry_data:/storage:z
      - ./common/config/registry/:/etc/registry/:z
      - type: bind
        source: ./secret/registry/root.crt
        target: /etc/registry/root.crt
      - type: bind
        source: ./common/config/shared/trust-certificates
        target: /harbor_cust_cert
    networks:
      - mynet
    depends_on:
      - log
    logging:
      driver: "syslog"
      options:
        syslog-address: "tcp://localhost:1514"
        tag: "registry"
  registryctl:
    image: goharbor/harbor-registryctl:v2.13.2
    container_name: registryctl
    env_file:
      - ./common/config/registryctl/env
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - "registry_data:/storage:z"
      - ./common/config/registry/:/etc/registry/:z
      - type: bind
        source: ./common/config/registryctl/config.yml
        target: /etc/registryctl/config.yml
      - type: bind
        source: ./common/config/shared/trust-certificates
        target: /harbor_cust_cert
    networks:
      - mynet
    depends_on:
      - log
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  postgresql:
    image: goharbor/harbor-db:v2.13.2
    container_name: harbor-db
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    volumes:
      - "database_data:/var/lib/postgresql/data:z"
    networks:
      - mynet
    env_file:
      - ./common/config/db/env
    depends_on:
      - log
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    shm_size: '1gb'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  core:
    image: goharbor/harbor-core:v2.13.2
    container_name: harbor-core
    env_file:
      - ./common/config/core/env
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    volumes:
      - "./ca_download:/etc/core/ca:z"
      - "./data:/data:z"
      - "./common/config/core/certificates:/etc/core/certificates:z"
      - type: bind
        source: "./common/config/core/app.conf"
        target: "/etc/core/app.conf"
      - type: bind
        source: "./secret/core/private_key.pem"
        target: "/etc/core/private_key.pem"
      - type: bind
        source: "./secret/keys/secretkey"
        target: "/etc/core/key"
      - type: bind
        source: "./common/config/shared/trust-certificates"
        target: "/harbor_cust_cert"
    networks:
      - mynet
    depends_on:
      log:
        condition: service_started
      registry:
        condition: service_started
      redis:
        condition: service_started
      postgresql:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  portal:
    image: goharbor/harbor-portal:v2.13.2
    container_name: harbor-portal
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    volumes:
      - type: bind
        source: "./common/config/portal/nginx.conf"
        target: "/etc/nginx/nginx.conf"
    networks:
      - mynet
    depends_on:
      - log
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  jobservice:
    image: goharbor/harbor-jobservice:v2.13.2
    container_name: harbor-jobservice
    env_file:
      - ./common/config/jobservice/env
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - "./job_logs:/var/log/jobs:z"
      - type: bind
        source: "./common/config/jobservice/config.yml"
        target: "/etc/jobservice/config.yml"
      - type: bind
        source: "./common/config/shared/trust-certificates"
        target: "/harbor_cust_cert"
    networks:
      - mynet
    depends_on:
      - core
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  redis:
    image: goharbor/redis-photon:v2.13.2
    container_name: redis
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    volumes:
      - "redis_data:/var/lib/redis"
    networks:
      - mynet
    depends_on:
      - log
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  proxy:
    image: goharbor/nginx-photon:v2.13.2
    container_name: nginx
    restart: always
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    volumes:
      - "./common/config/nginx:/etc/nginx:z"
      - type: bind
        source: "./secret/cert"
        target: /etc/harbor/certs
      - type: bind
        source: "./secret/cert"
        target: /etc/docker/certs.d/harbor.fakehub.com
      - type: bind
        source: "./common/config/shared/trust-certificates"
        target: "/harbor_cust_cert"
    networks:
      - mynet
    ports:
      - 80:8080
      - 443:8443
    depends_on:
      - registry
      - core
      - portal
      - log
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  redis_cache:
    image: redis:7
    container_name: redis_cache
    networks:
      - mynet
    ports:
      - "6379:6379"
    volumes:
      - redis_data_cache:/data
    command: ["redis-server", "--appendonly", "yes"]

volumes:
  db-data:
  nuget_cache:
  mysql-logs:
  registry_data:
  database_data:
  redis_data:
  redis_data_cache:

networks:
  mynet:
    driver: bridge